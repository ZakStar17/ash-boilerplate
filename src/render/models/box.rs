use crate::render::objects::TexVertex;

use super::TexModel;

pub struct Box {}

macro_rules! get_vertices {
  ($($p1:expr, $p2:expr, $p3:expr, $n1:expr, $n2:expr, $n3:expr, $t1:expr, $t2:expr,)+) => {
    [$(
      TexVertex {
        pos: [$p1, $p2, $p3],
        normal: [$n1, $n2, $n3],
        tex: [$t1, $t2]
      },
    )+]
  }
}

// vertices with normals and textures
// -1.0, -1.0, -1.0,    0.0,  0.0, -1.0,   0.0, 0.0,
//  1.0,  1.0, -1.0,    0.0,  0.0, -1.0,   1.0, 1.0,
//  1.0, -1.0, -1.0,    0.0,  0.0, -1.0,   1.0, 0.0,
// -1.0,  1.0, -1.0,    0.0,  0.0, -1.0,   0.0, 1.0,
// -1.0, -1.0,  1.0,    0.0,  0.0,  1.0,   0.0, 0.0,
//  1.0, -1.0,  1.0,    0.0,  0.0,  1.0,   1.0, 0.0,
//  1.0,  1.0,  1.0,    0.0,  0.0,  1.0,   1.0, 1.0,
// -1.0,  1.0,  1.0,    0.0,  0.0,  1.0,   0.0, 1.0,
// -1.0,  1.0,  1.0,   -1.0,  0.0,  0.0,   1.0, 0.0,
// -1.0,  1.0, -1.0,   -1.0,  0.0,  0.0,   1.0, 1.0,
// -1.0, -1.0, -1.0,   -1.0,  0.0,  0.0,   0.0, 1.0,
// -1.0, -1.0,  1.0,   -1.0,  0.0,  0.0,   0.0, 0.0,
//  1.0,  1.0,  1.0,    1.0,  0.0,  0.0,   1.0, 0.0,
//  1.0, -1.0, -1.0,    1.0,  0.0,  0.0,   0.0, 1.0,
//  1.0,  1.0, -1.0,    1.0,  0.0,  0.0,   1.0, 1.0,
//  1.0, -1.0,  1.0,    1.0,  0.0,  0.0,   0.0, 0.0,
// -1.0, -1.0, -1.0,    0.0, -1.0,  0.0,   0.0, 1.0,
//  1.0, -1.0, -1.0,    0.0, -1.0,  0.0,   1.0, 1.0,
//  1.0, -1.0,  1.0,    0.0, -1.0,  0.0,   1.0, 0.0,
// -1.0, -1.0,  1.0,    0.0, -1.0,  0.0,   0.0, 0.0,
// -1.0,  1.0, -1.0,    0.0,  1.0,  0.0,   0.0, 1.0,
//  1.0,  1.0,  1.0,    0.0,  1.0,  0.0,   1.0, 0.0,
//  1.0,  1.0, -1.0,    0.0,  1.0,  0.0,   1.0, 1.0,
// -1.0,  1.0,  1.0,    0.0,  1.0,  0.0,   0.0, 0.0,

impl Box {
  const VERTICES: [TexVertex; 24] = get_vertices!(
    -1.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 1.0,
    -1.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0, -1.0,
    1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
    1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0,
    0.0, -1.0, 1.0, -1.0, -1.0, 0.0, 0.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 1.0,
    -1.0, -1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
    -1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, -1.0, -1.0, 0.0, -1.0,
    0.0, 1.0, 1.0, 1.0, -1.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, -1.0, 1.0, 0.0, -1.0, 0.0, 0.0,
    0.0, -1.0, 1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0,
    1.0, -1.0, 0.0, 1.0, 0.0, 1.0, 1.0, -1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0,
  );

  const INDICES: [u16; 36] = [
    0, 1, 2, 1, 0, 3, 4, 5, 6, 6, 7, 4, 8, 9, 10, 10, 11, 8, 12, 13, 14, 13, 12, 15, 16, 17, 18,
    18, 19, 16, 20, 21, 22, 21, 20, 23,
  ];
}

impl TexModel for Box {
  fn load() -> (Vec<TexVertex>, Vec<u16>) {
    (Self::VERTICES.to_vec(), Self::INDICES.to_vec())
  }

  fn tex_index() -> usize {
    1
  }
}
